<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
						   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
						   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
						   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">



    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:conf/db.properties"/>

    <!--druid连接池  -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${druid.driver}"/>
        <property name="url" value="${druid.url}"/>
        <property name="username" value="${druid.username}"/>
        <property name="password" value="${druid.password}"/>
    </bean>

    <!-- 配置Mybatis工厂 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"/>
    </bean>

    <!-- Mapper动态代理开发  扫包  给定包下的接口文件名和映射文件名必须相同  创建接口的实现类-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.nexoit.mapper" />
    </bean>

    <!-- 开启事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
        <!-- 拦截器方式配置事物 -->
        <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
            <tx:attributes>
                <tx:method name="add*" propagation="REQUIRED" />
                <tx:method name="append*" propagation="REQUIRED" />
                <tx:method name="insert*" propagation="REQUIRED" />
                <tx:method name="save*" propagation="REQUIRED" />
                <tx:method name="update*" propagation="REQUIRED" />
                <tx:method name="modify*" propagation="REQUIRED" />
                <tx:method name="edit*" propagation="REQUIRED" />
                <tx:method name="delete*" propagation="REQUIRED" />
                <tx:method name="remove*" propagation="REQUIRED" />
                <tx:method name="repair" propagation="REQUIRED" />
                <tx:method name="delAndRepair" propagation="REQUIRED" />

                <tx:method name="get*" propagation="SUPPORTS" />
                <tx:method name="find*" propagation="SUPPORTS" />
                <tx:method name="load*" propagation="SUPPORTS" />
                <tx:method name="search*" propagation="SUPPORTS" />
                <tx:method name="datagrid*" propagation="SUPPORTS" />

                <tx:method name="*" propagation="SUPPORTS" />
            </tx:attributes>
        </tx:advice>
    </bean>

    <!-- 事物注解驱动-->
    <tx:annotation-driven transaction-manager="transactionManager"/>





    <!--2.配置通知-->
    <bean name="myAdvice" class="com.nexoit.aop.MyAdvice"/>

    <!--3.织入-->
    <aop:config>
        <!--切入点-->
        <!--切入点配置说明

           切入点配置需要使用 execution()

           下面这个是配置 UserServiceImpl的saveUser方法
           public void com.qwm.spring2.service.UserServiceImpl.saveUser()
           public可以省略
           void com.qwm.spring2.service.UserServiceImpl.saveUser()

           可以使用 * 表示指定返回值
           * com.qwm.spring2.service.UserServiceImpl.saveUser()

           可以使用 * 表示配置所有方法
           * com.qwm.spring2.service.UserServiceImpl.*()

            可以使用 * 表示匹配指定的类 （只会匹配 service包下的类）
            * com.qwm.spring2.service.*ServiceImpl.*()

            可以使用 .. 表示匹配子包已经子子包（会匹配 service包下以及所有子包的类）
            * com.qwm.spring2.service..*ServiceImpl.*()
        -->
        <aop:pointcut id="userservice" expression="execution(* com.nexoit.service.impl.UserServiceImpl.getUserList())"/>
        <!--织入通知-->
        <aop:aspect ref="myAdvice">
            <!--前置通知-->
            <aop:before method="before" pointcut-ref="userservice"/>
            <!--后置通知-->
            <aop:after-returning method="afterReturning" pointcut-ref="userservice"/>
            <!--环绕通知-->
            <aop:around method="around" pointcut-ref="userservice"/>
            <!--异常拦截通知-->
            <aop:after-throwing method="afterException" pointcut-ref="userservice"/>
            <!--后置通知-->
            <aop:after method="after" pointcut-ref="userservice"/>
        </aop:aspect>
    </aop:config>

</beans>